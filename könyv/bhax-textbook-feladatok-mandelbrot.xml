<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
	<info>
	        <title>3. hét - Helló, Mandelbrot!</title>
	        <keywordset>
        		<keyword/>
        	</keywordset>
    	</info>
    	<section>
    		<title> EPAM: Neptun tantárgyfelvétel modellezése UML-ben </title>
		<para> Modellezd le a Neptun rendszer tárgyfelvételéhez szükséges objektumokat UML diagramm segítségével. </para>



		<para> 
A felvétel UML diagramja:
		</para>

		<figure>
			<mediaobject>
				<imageobject>
					<imagedata fileref="uml.png" format = "PNG"/>
				</imageobject>
			</mediaobject>
		</figure>

		<para> 
A modellben összesen 6 darab osztály van.
		</para>

		<para> 
A diagrammon minden osztály és függvény publikus, és minden változó privát.
		</para>

		<para> 
Ezek közül a legegyszerűbbek a CurriculumSubject és a NonCurriculumSubject publikus osztályok, azaz a kötelező és nem kötelező tárgyak. Mindketten a Subject (tantárgy) alosztályai. 
		</para>

		<para> 
Minden tantárgynak van privát kódja, neve, típusa, illetve hozzá tartozó hallgatók és oktatók. Ezek közül a kód és név karakterláncok, a students és lecturers pedig Student (hallgató) és Lecturer (oktató) objektumokból álló halmazok. Természetesen mindegyik értékhez tartozik egy szokásos get metódus az érték eléréséhez. Ezen kívül itt található még az új hallgatók és oktatók hozzáadásáért felelős függvények is. 
		</para>

		<para> 
A SubjectType egy külön osztályban van definiálva. Ez egy enum típus ami lehet elméleti, labor vagy gyakorlati. Ez adja a Subject subjectType nevű változójának a typusát.
		</para>

		<para> 
Ezen kívül még a Student és Lecturer osztályok vannak. Az oktatónak neve van, amit meg le lehet kérni, a hallgatónak viszont neven kívül van felvett tárgyai is. Mindkettőt le lehet kérni, illetve a tárgyakhoz hozzá lehet adni, illetve lehet belőlük elvonni.
		</para>

	</section>

    	<section>
    		<title> EPAM: Neptun tantárgyfelvétel UML diagram implementálása </title>
		<para> Implementáld le az előző feladatban létrehozott diagrammot egy tetszőleges nyelven. </para>



		<para> 
A fenti diagramnak a Java-ban való implementációja:
		</para>

		<para> 
A Lecturer osztály:
		</para>

		<programlisting> 
package com.epam.training.lecturer;

public class Lecturer {
    private String name;

    public String getName() {
        return name;
    }
}
		 </programlisting>

		<para> 
Ez egy egyszerű osztály. Áll egy név változóból és a hozzátartozó getterből.
		</para>

		<para> 
A Student osztály:
		</para>

		<programlisting> 
package com.epam.training.student;

import com.epam.training.subject.Subject;
import java.util.Set;

public class Student {

    private String name;
    private Set&lt;Subject&gt; subjects;

    public String getName() {
        return name;
    }

    public Set&lt;Subject&gt; getSubjects() {
        return subjects;
    }

    public void addSubject(Subject subject) {
        this.subjects.add(subject);
    }

    public void removeSubject(Subject subject) {
        this.subjects.remove(subject);
    }

}
		 </programlisting>

		<para> 
Ez az osztály összeköttetésben áll a Subject-tel, hiszen a subjects változó Subject objektumok halmazából áll.
		</para>

		<para> 
A SubjectType osztály
		</para>

		<programlisting> 
package com.epam.training.subject;

public enum SubjectType {

    THEORETICAL,
    PRACTICAL,
    LABORATORY

}
		 </programlisting>

		<para> 
Egy egyszerű enum osztály benne három értékkel.
		</para>

		<para> 
A Subject osztály:
		</para>

		<programlisting> 
package com.epam.training.subject;

import com.epam.training.lecturer.Lecturer;
import com.epam.training.student.Student;
import java.util.Set;

public class Subject {

    private String code;
    private String name;
    private SubjectType subjectType;
    private Set&lt;Student&gt; students;
    private Set&lt;Lecturer&gt; lecturers;

    public String getCode() {
        return code;
    }

    public String getName() {
        return name;
    }

    public SubjectType getSubjectType() {
        return subjectType;
    }

    public Set&lt;Student&gt; getStudents() {
        return students;
    }

    public Set&lt;Lecturer&gt; getLecturers() {
        return lecturers;
    }

    public void addNewStudent(Student student) {
        this.students.add(student);
    }

    public void addNewLecturer(Lecturer lecturer) {
        this.lecturers.add(lecturer);
    }

}
		 </programlisting>

		<para> 
Ez a legnagyobb osztály. illetve ez áll a modell középpontjában, hiszen minden másik osztállyal közvetlenül összeköttetésben áll.
		</para>

		<para> 
A CurriculumSubject és NonCurriculumSubject osztályok:
		</para>

		<programlisting> 
package com.epam.training.subject;

public class CurriculumSubject extends Subject {
}

package com.epam.training.subject;

public class NonCurriculumSubject extends Subject {
}
		 </programlisting>

		<para> 
Azon kívül, hogy a Subject alosztályai, nincs bennük semmi különös. Csupán a megkülönböztetés miatt léteznek.
		</para>

	</section>

    	<section>
    		<title> EPAM: OO modellezés </title>
		<para> Írj egy 1 oldalas esszét arról, hogy OO modellezés során milyen elveket tudsz követni (pl.: SOLID, KISS, DRY, YAGNI). </para>

		<para>
OO modellezéskor számos elvet tudunk követni. Ezen elvek ismerete fontos, hiszen segítenek minket a hatékonyabb munkában, illetve gyakori hibák elkerülésében. Ezek közül a KISS, SOLID, DRY és a YAGNI elvekről fogok itt írni. 
		</para>

		<para>
A KISS (keep it simple, stupid vagy keep it stupid simple, magyar nagyjából: maradj az egyszerűségnél) a nevéhez híven a következőt állítja: A legtöbb rendszer akkor működik a legjobban, ha egyszerűek, nem lesznek túlbonyolítva, tehát az OO modellezés során az egyik legfontosabb tervezési cél az egyszerűség.  A szükségtelen bonyolítástól pedig el kell tekintenünk.
		</para>

		<para>
A DRY (Don’t Repeat Yourself – Ne ismételd magad) szerint az ismétléseket érdemes elkerülni, , tehát ha azon vesszük magunkat, hogy valamit már sokadjára leírtunk ugyanúgy, vagy kicsit másképpen, akkor valószínűleg érdemes lenne elgondolkodni egy lehetségéges absztrakción. A 
		</para>

		<para>
DRY szerint minden információnak egyetlen, félreérthetetlen reprezentációjának kell lennie a rendszeren belül. Ezt az elvet használhatjuk többek között adatbázisoknál, tesztelésnél, sőt még a dokumentáció során is.
		</para>

		<para>
Ha sikeresen alkalmazzuk a DRY elvet, akkor egy elem megváltoztatásával nem fog más logikailag nem kapcsolódó részekben változás járni. A logikailag kapcsolódó részekben viszont ez a változás is logikus és kiszámítható lesz.
		</para>

		<para>
A YAGNI (You aren’t gonna need it – Nem lesz rá szükséged) szerinte a programozó ne adjon olyan funkcionalitást a programhoz, amire még nincs szükség. Ezeket a funkcionalitásokat csak akkor kell implementálnunk, amikor tényleg szükségünk van rá, és nem akkor amikor úgy véljük, hogy előreláthatólag szükségünk lesz rá.
		</para>

		<para>
Végezetül mpedig a SOLID. A SOLID minden betűje egy elv kezdőbetűje.
		</para>

		<para>
Az első ilyen elv a Single Responsibility. A Single Responsibility szerint minden osztálynak csakis egy dologért szabad felelnie. Tehát egy osztályt csak egy cél érdekében szabad írnunk. Ha valami mást is szeretnénk csinálni, akkor azt tegyük meg egy másik osztállyal. Ha követjük ezt az elvet akkor minden osztály, amit írunk egyszerű, tömör és átlátható lesz.
		</para>

		<para>
A második elv az Open Closed. Az osztályokat mindig legyen nyílt a kibővítésre, de zárt a módosításra. Tehát, úgy tervezzük meg az osztályokat, hogy ha egy másik fejlesztő valamin változtatni szeretne, akkor elegendő legyen azt az osztályt kiegészíteni, és ne keljen semmin módosítani.
		</para>

		<para>
A harmadik a Liskov’s Substitution. Eszerint a származtatott típusokat lehessen az alaptípusokkal helyettesíteni.  Ennek az a lényege, hogy a más fejlesztők által készített alosztályok illeszkedjenek be tökéletesen az alkalmazásba. Ennek az a kötöttsége, hogy az alosztályok objektumainak ugyanúgy kell viselkedniük, mint a szülő osztály objektumainak.
		</para>

		<para>
A negyedik az Interface Segregation. Nem szabad arra kényszeríteni a klienseket, hogy olyan metódusokat implementáljanak, amelyeket nem fognak használni. Azaz, ha például van egy interfészünk, amelynek van két metódusa, amelyek közül a kliens csak az egyiket szeretné használni, akkor hiába csak az egyiket szeretné használni, akkor is mind a kettő metódust implementálnia kell. Ekkor a megoldás, hogy a létező interfészt osszuk meg. 
		</para>

		<para>
Az ötödik pedig a Dependency Inversion. Tervezzünk olyan szoftvert, hogy a különböző modulok legyenek egymástól könnyen elválaszthatók és használjuk egy absztrakt réteget, amely össze köti őket.
		</para>

	</section>

</chapter>
