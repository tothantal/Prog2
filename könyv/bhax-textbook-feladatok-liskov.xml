<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
	<info>
	        <title>2. hét - Helló, Liskov!</title>
	        <keywordset>
        		<keyword/>
        	</keywordset>
    	</info>
    	<section>
    		<title> Liskov helyettesítés sértése </title>
		<para> Írjunk olyan OO, leforduló Java és C++ kódcsipetet, amely megsérti a Liskov elvet! Mutassunk rá a megoldásra: jobb OO tervezés.  </para>

		

		<para> 
OOP programozás során a Liskov helyettesítési elv azt mondja, hogy ha S T-nek egy altípusa, akkor a T típusú objektumokat lecserélhetjük bármely S típusú objektumra anélkül, hogy a program kívánt tulajdonságait elvennénk. Az alábbi C++ kódcsipet megsérti a Liskov elvet.  
		</para>

		<programlisting> 
// ez a T az LSP-ben
class Madar {
public:
     virtual void repul() {};
};

// ez a két osztály alkotja a "P programot" az LPS-ben
class Program {
public:
     void fgv ( Madar &amp;madar ) {
          madar.repul();
     }
};

// itt jönnek az LSP-s S osztályok
class Sas : public Madar
{};

class Pingvin : public Madar // ezt úgy is lehet/kell olvasni, 
			          //hogy a pingvin tud repülni
{};

int main ( int argc, char **argv )
{
     Program program;
     Madar madar;
     program.fgv ( madar );

     Sas sas;
     program.fgv ( sas );

     Pingvin pingvin;
     program.fgv ( pingvin ); // sérül az LSP, mert a P::fgv 
			      // röptetné a Pingvint, ami ugye 
			      // lehetetlen.

}
		</programlisting>

		<para>
Ez a kódcsipet azért sérti a Liskov elvet, mert a programnak az a tulajdonsága, hogy helyes legyen sérül, amikor helyettesíteni akarjuk a Madar osztályunkat a Pingvin osztállyal, hiszen a Pingvinek nem tudnak repülni, viszont minden madárnak adtunk egy repül függvényt.
		</para>

		<para>
Annak érdekében, hogy ezt a sértést elkerüljük, egyszerűen jobban át kell gondolnunk a programunk tervezését, és ahelyett, hogy csak egy alap madár osztályt vezetünk be, írunk annak egy repülő madár alosztályát. Ezután megadjuk a Sas-t a repülő madár alosztályának, a Pingvint pedig az alap Madár-énak.
		</para>


		<para>
Ez a kódban a következőképpen valósul meg.
		</para>


		<programlisting> 
// ez a T az LSP-ben
class Madar {};

// ez a két osztály alkotja a "P programot" az LPS-ben
class Program {
public:
     void fgv ( Madar &amp;madar ) {
          // madar.repul(); a madár már nem tud repülni
          // s hiába lesz a leszármazott típusoknak
	  // repül metódusa, azt a Madar&amp; madar-ra 
          // úgysem lehet hívni
     }
};

// itt jönnek az LSP-s S osztályok
class RepuloMadar : public Madar {
public:
     virtual void repul() {};
};

class Sas : public RepuloMadar
{};

class Pingvin : public Madar // ezt úgy is lehet/kell olvasni, hogy a pingvin tud repülni
{};

int main ( int argc, char **argv )
{
     Program program;
     Madar madar;
     program.fgv ( madar );

     Sas sas;
     program.fgv ( sas );

     Pingvin pingvin;
     program.fgv ( pingvin );

}
		</programlisting>


		<para>
Ezeknek a programoknak Java-ba átíráskor csak az objektumok inicializálását és az alosztályok definiálását kell átírni a new és az extends kulcsszavak segytségével, illetve a megszokott main() fügvénnyel. A kódcsipet:
		</para>


		<programlisting> 
// ez a T az LSP-ben
class Madar {
	public void repul() {};
};

// ez a két osztály alkotja a "P programot" az LPS-ben
class Program {
	public void fgv ( Madar madar ) {
          madar.repul();
     }
};

// itt jönnek az LSP-s S osztályok
class Sas extends Madar
{};

class Pingvin extends Madar // ezt úgy is lehet/kell olvasni, 
			    // hogy a pingvin tud repülni
{};

public class Main{

     public static void main(String []args){
        Program program = new Program();
        Madar madar = new Madar();
        program.fgv ( madar );

        Sas sas = new Sas();
        program.fgv ( sas );

        Pingvin pingvin = new Pingvin();
        program.fgv ( pingvin ); // sérül az LSP, mert a P::fgv 
			    	          // röptetné a Pingvint, ami ugye 
				          // lehetetlen.
     }
}

		</programlisting>


		<para>
Ezek amik sértik a Liskov elvet. A sértést elkerülő változat Java-ban ugyanúgy valósul meg, mint C++-ban az előbb említett változtatásokkal.
		</para>

		<programlisting> 
// ez a T az LSP-ben
class Madar {};

class RepuloMadar extends Madar {
    public void repul() {};
}

// ez a két osztály alkotja a "P programot" az LPS-ben
class Program {
    public void fgv ( Madar madar ) {}
};

// itt jönnek az LSP-s S osztályok
class Sas extends RepuloMadar {};

class Pingvin extends Madar {};

public class Main{

     public static void main(String []args){
        Program program = new Program();
        Madar madar = new Madar();
        program.fgv ( madar );

        Sas sas = new Sas();
        program.fgv ( sas );

        Pingvin pingvin = new Pingvin();
        program.fgv ( pingvin ); // sérül az LSP, mert a P::fgv 
			    	 // röptetné a Pingvint, ami ugye 
				 // lehetetlen.
     }
}
		</programlisting>


	</section>

    	<section>
    		<title> EPAM: Interfész evolúció Java-ban </title>
		<para> Mutasd be milyen változások történtek Java 7 és Java 8 között az interfészekben. Miért volt erre szükség, milyen problémát vezetett ez be? </para>

		<para> 
A Java 8 interface változtatások részei, hogy Java 8-ban már lehet interface-nek statikus és default metódusokat megadni. 8 előtt csak metódus deklarációkat adhattunk interface-eknek.
		</para>

		<para> 
Java-ban a default metódusok készítése a default kulcsszóval történik.
		</para>


		<programlisting> 
package com.journaldev.java8.defaultmethod;

public interface Interface1 {

	void method1(String str);
	
	default void log(String str){
		System.out.println("I1 logging::"+str);
	}
}
		</programlisting>

		<para> 
A fenti kódban a default metódus Interface1-ben a log(String str). Így, ha egy osztály implementálja ezt az interfészt, már nem kell annak az interfésznek a default metódusaihoz implementációt biztosítani. 
		</para>

		<para> 
Tegyük fel, hogy van még egy interfészünk:
		</para>


		<programlisting> 
package com.journaldev.java8.defaultmethod;

public interface Interface2 {

	void method2();
	
	default void log(String str){
		System.out.println("I2 logging::"+str);
	}

}
		</programlisting>

		<para> 
ilyenkor felmerül az úgynevezett „diamond problem”, aminek a lényege, hogy ha van egy osztályunk, ami implementálná a fenti két interfészt, de nem implementálna egy default metódust, akkor a program nem tudná eldönteni, hogy melyik interfész default metódusát használja.
		</para>

		<para> 
Most már, ha egy osztály mindkét interfész implementálni akarja, akkor kötelező implementálnia a fdefault metódusokat is. Pl.:
		</para>


		<programlisting> 
package com.journaldev.java8.defaultmethod;

public class MyClass implements Interface1, Interface2 {

	@Override
	public void method2() {
	}

	@Override
	public void method1(String str) {
	}

	@Override
	public void log(String str){
		System.out.println("MyClass logging::"+str);
		Interface1.print("abc");
	}
}
		</programlisting>

		<para> 
A statikus metódusok hasonlóak a default-okhoz, azzal a különbséggel, hogy nem tudjuk őket felülírni. Ez segít elkerülni nem kívánt eredményeket nem elégséges implementációk esetén. 
		</para>


	</section>

    	<section>
    		<title> EPAM: Liskov féle helyettesíthetőség elve, öröklődés </title>
		<para> Adott az alábbi osztály hierarchia. </para>

		<programlisting> 
class Vehicle, class Car extends Vehicle, class Supercar extends Car
  		</programlisting>
		
		<para>
Mindegyik osztály konstruktorában történik egy kiíratás, valamint a Vehicle osztályban szereplő start() metódus mindegyik alosztályban felül van definiálva.
Mi történik ezen kódok futtatása esetén, és miért?
		</para>

		<programlisting> 
Vehicle firstVehicle = new Supercar();
firstVehicle.start();
System.out.println(firstVehicle instanceof Car);
Car secondVehicle = (Car) firstVehicle;
secondVehicle.start();
System.out.println(secondVehicle instanceof Supercar);
Supercar thirdVehicle = new Vehicle();
thirdVehicle.start();
  		</programlisting>


		<programlisting>
Vehicle firstVehicle = new Supercar();
firstVehicle.start();
System.out.println(firstVehicle instanceof Car);
		</programlisting>

		<para>
A fenti kód esetén a következőt kapjuk eredményül:
		</para>


		<programlisting>
Creating vehicle!
Creating car!
Creating supercar!
Supercar is starting!
true
		</programlisting>

		<para>
Ez azért van, hiszen a Supercar a Car alosztálya, ami a Vehicle alosztálya. Supercar nem létezhet Car osztály nélkül, és az sem Vehicle nélkül. Miután elkészült a Supercar objektum, elindítjuk a start függvényét, és a várt eredményt adja vissza nekünk. A printlnban megvizsgáljuk, hogy a firstVehicle Car-nak egy instance-a, azaz a Supercar objektum egy Car objektum is egyben.
		</para>


		<programlisting>
Car secondVehicle = (Car) firstVehicle;
secondVehicle.start();
System.out.println(secondVehicle instanceof Supercar);
		</programlisting>

		<para>
A fentire a következőt kapjuk:
		</para>


		<programlisting>
Supercar is starting!
true
		</programlisting>

		<para>
Látható hogy itt már nem történik új objektum létrehozása, hiszen csak castoljuk, és az eredményt megadjuk a secodVehicle-nek. Azonban az eredmény marad a Supercar is starting, hiszen ahogy a következő true eredmény is mutatja, a secondVehicle instance-a a Supercar-nak. Ez azért történt, mert természetesen a Supercar is egy Car, tehát Supercar Car-á castolása során valójában nem szükséges semmit sem csinálnunk.
		</para>


		<programlisting>
Supercar thirdVehicle = new Vehicle();
thirdVehicle.start();
		</programlisting>

		<para>
Ez a rész szintaktikai hibát okoz, és nem engedi lefordulni a programot. Ezt a hibaüzenetet kapjuk.
		</para>


		<programlisting>
error: incompatible types: Vehicle cannot be converted to Supercar
		</programlisting>

		<para>
A probléma a Vehicle és a Supercar osztályok egymás közötti kapcsolatából függ. A Supercar a Vehicle alosztálya, tehát amíg minden Supercar Vehicle is egyben, addig nem minden Veghicle Supercar. Most a kódrészlet egy Supercar objektumot próbál létrehozni a Vehicle() függvénnyel. 
		</para>

		<para>
A helyes kódrészlet ez lenne:
		</para>

		<programlisting>
Supercar thirdVehicle = new Supercar();
		</programlisting>

	</section>

</chapter>
