import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class FutureChainingExercise {
	private static ExecutorService executorService = Executors.newFixedThreadPool(2);
	
	public static void main(String[] args) {
		CompletableFuture<String> longTask
			= CompletableFuture.supplyAsync(() -> {
				try {
					TimeUnit.MILLISECONDS.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return "Hello";
			}, executorService);
		
		CompletableFuture<String> shortTask
			= CompletableFuture.supplyAsync(() -> {
				try {
					TimeUnit.MILLISECONDS.sleep(500);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return "Hi";
			}, executorService);
		
		CompletableFuture<String> mediumTask
			= CompletableFuture.supplyAsync(() -> {
				try {
					TimeUnit.MILLISECONDS.sleep(750);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return "Hey";
			}, executorService);
		
		CompletableFuture<String> result
			= longTask.applyToEitherAsync(shortTask, String::toUpperCase, executorService); result = result.thenApply(s -> s + " World");
	
		CompletableFuture<Void> extraLongTask
			= CompletableFuture.supplyAsync(() -> {
				try {
					TimeUnit.MILLISECONDS.sleep(1500);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return null;
			}, executorService);
			
			result = result.thenCombineAsync(mediumTask, (s1, s2) -> s2 + ", " + s1, executorService);
			
			System.out.println(result.getNow("Bye"));
			try {
				TimeUnit.MILLISECONDS.sleep(1500);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			System.out.println(result.getNow("Bye"));
			
			result.runAfterBothAsync(extraLongTask, () -> System.out.println("After both!"), executorService); result.whenCompleteAsync((s, throwable) -> System.out.println("Complete: " +s), executorService);
			
			executorService.shutdown();
	}
}
